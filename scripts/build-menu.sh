#!/bin/bash
set -e

# Get the directory where the script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
root_dir="${ROOT_DIR:-$(dirname "$SCRIPT_DIR")}"

# Source the utils file
source "${SCRIPT_DIR}/utils.sh"

# Get all releases and sort them from newest to oldest
echo "Fetching releases..."
releases=$(fetch_latest_releases | sort -Vr)
if [ -z "$releases" ]; then
    echo "Error: No releases found" >&2
    exit 1
fi

# Verify hugo.toml exists and is readable
if [ ! -f "hugo.toml" ]; then
    echo "Error: hugo.toml not found in $(pwd)"
    exit 1
fi

if [ ! -r "hugo.toml" ]; then
    echo "Error: hugo.toml is not readable"
    exit 1
fi

# Create a temporary file
tmp_file=$(mktemp)
echo "Created temporary file: $tmp_file"

# Read hugo.toml and process it line by line
echo "Processing hugo.toml..."
set +e
while IFS= read -r line || [ -n "$line" ]; do
    # Skip auto-generated line and the empty line that follows it
    if [[ "$line" == "# Auto-generated by build-menu.sh" ]]; then
        read -r empty_line || true  # Skip the next empty line
        continue
    fi
    # If line starts [[params.versions]], check if next line contains semver
    if [[ "$line" == "[[params.versions]]" ]]; then
        # Read next 2 lines
        if ! read -r version_line; then
            echo "Error: Failed to read version line"
            exit 1
        fi
        if ! read -r url_line; then
            echo "Error: Failed to read URL line"
            exit 1
        fi
        
        # Check if version line contains semver pattern (vX.Y.Z) or dev
        if [[ "$version_line" =~ version[[:space:]]*=[[:space:]]*\"(v[0-9]+\.[0-9]+\.[0-9]+|dev)\" ]]; then
            echo "Removing version section: $version_line"
            # Skip the empty line after this section
            read -r empty_line || true
            continue
        else
            # Not a semver section, write all lines
            echo "$line" >> "$tmp_file"
            echo "$version_line" >> "$tmp_file"
            echo "$url_line" >> "$tmp_file"
            echo "" >> "$tmp_file"
        fi
    else
        # Write all other lines unchanged
        echo "$line" >> "$tmp_file"
    fi
done < "hugo.toml"
set -e

echo "Finished processing hugo.toml"

# Verify the temporary file was created and has content
if [ ! -s "$tmp_file" ]; then
    echo "Error: Temporary file is empty"
    exit 1
fi

# Make a backup of the original file
cp "hugo.toml" "hugo.toml.bak"
echo "Created backup at hugo.toml.bak"

# Move the temporary file
if ! mv "$tmp_file" "hugo.toml"; then
    echo "Error: Failed to move temporary file to hugo.toml"
    mv "hugo.toml.bak" "hugo.toml"
    exit 1
fi

# Add the auto-generated line and versions
echo "# Auto-generated by build-menu.sh" >> "hugo.toml"
echo "" >> "hugo.toml"

# Append the dev version
echo "[[params.versions]]" >> "hugo.toml"
echo "  version = \"dev\"" >> "hugo.toml"
echo "  url = \"/docs\"" >> "hugo.toml"
echo "" >> "hugo.toml"

# Append the new version sections
for release in $releases; do
    # Strip origin/release/ prefix to get just the version number
    version=${release#origin/release/}
    echo "Appending params.versions section for $version"
    echo "[[params.versions]]" >> "hugo.toml"
    echo "  version = \"$version\"" >> "hugo.toml"
    echo "  url = \"/$version/docs\"" >> "hugo.toml"
    echo "" >> "hugo.toml"
done

echo "Done!" 