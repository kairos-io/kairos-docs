<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced on Kairos</title>
    <link>https://kairos.io/docs/advanced/</link>
    <description>Recent content in Advanced on Kairos</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://kairos.io/docs/advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pushing configuration to a node after installation</title>
      <link>https://kairos.io/docs/advanced/after-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/after-install/</guid>
      <description>&lt;p&gt;Kairos configuration mechanism is based on the &lt;code&gt;cloud-config &lt;/code&gt;file given during installation, however, it&amp;rsquo;s possible to extend the configuration by providing additional cloud-configs in either &lt;code&gt;/oem&lt;/code&gt; or &lt;code&gt;/usr/local/cloud-config&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;By default, &lt;code&gt;kairos&lt;/code&gt; reads in lexicographic order YAML cloud-config files in the directories above, indeed, after installation you should be able to see the configuration generated by the interactive-installer as &lt;code&gt;/oem/99_custom.yaml&lt;/code&gt; in the system.&lt;/p&gt;&#xA;&lt;p&gt;This mechanism can be used to set and enable persistent configuration on boot after node deployment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configuring partitions</title>
      <link>https://kairos.io/docs/advanced/configuring_partitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/configuring_partitions/</guid>
      <description>&lt;p&gt;Kairos configuration mechanism for partitions is based on the &lt;a href=&#34;https://kairos.io/docs/reference/configuration/&#34;&gt;cloud-config&lt;/a&gt; file&#xA;given during installation to override the default values set by the installer.&lt;/p&gt;&#xA;&lt;p&gt;We allow certain flexibility in the sizes and filesystems used for the default install and allow to create extra partitions as well.&lt;/p&gt;&#xA;&lt;p&gt;For example, the following cloud-config will make the &lt;code&gt;oem&lt;/code&gt; partition have a size of 512Mb and an &lt;code&gt;ext4&lt;/code&gt; filesystem,&#xA;recovery with a size of 10000Mb and a &lt;code&gt;ext4&lt;/code&gt; filesystem, while leaving the rest of the partitions to their default sizes and filesystems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating Custom Cloud Images</title>
      <link>https://kairos.io/docs/advanced/creating_custom_cloud_images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/creating_custom_cloud_images/</guid>
      <description>&lt;p&gt;This guide provides a complete walkthrough for creating custom cloud images with Kairos. It covers the entire process from start to finish, using the latest tools like &lt;code&gt;kairos-init&lt;/code&gt; and &lt;code&gt;AuroraBoot&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;Kairos provides several tools to create custom cloud images:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;kairos-init&lt;/strong&gt;: A tool for creating base container images&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;AuroraBoot&lt;/strong&gt;: A tool for generating bootable images (ISOs, cloud images, etc.)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Customization tools&lt;/strong&gt;: Various methods to customize the images&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Before starting, ensure you have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Private registries authentication</title>
      <link>https://kairos.io/docs/advanced/private_registry_auth/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/private_registry_auth/</guid>
      <description>&lt;p&gt;As the source for install or upgrade can be an OCI image and sometimes those are behind a private container registry, Kairos&#xA;implements the default basic authentication used by docker for private registries.&lt;/p&gt;&#xA;&lt;p&gt;To install/upgrade with a container image behind a registry with authentication, Kairos reads the following files in order to find about registry auth:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;${XDG_CONFIG_HOME}/.docker/config.json&lt;/li&gt;&#xA;&lt;li&gt;If set, DOCKER_CONFIG environment variable which points to a directory &lt;a href=&#34;https://docs.docker.com/reference/cli/docker/#environment-variables&#34;&gt;as per the docs&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;${XDG_RUNTIME_DIR}/containers/auth.json for podman&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;&#xA;&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;&#xA;&#xA;    &lt;p&gt;If you are using &lt;code&gt;sudo&lt;/code&gt; to perform the upgrade, you have a couple of options:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Customizing the system image</title>
      <link>https://kairos.io/docs/advanced/customizing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/customizing/</guid>
      <description>&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;&#xA;&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;&#xA;&#xA;    This guide focuses on customizing Kairos images. For a complete guide on creating custom cloud images from scratch, including when and how to apply these customizations, see &lt;a href=&#34;https://kairos.io/docs/advanced/creating_custom_cloud_images/&#34;&gt;Creating Custom Cloud Images&lt;/a&gt;.&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Kairos is an open source, container-based operating system. To modify Kairos and add a package, you&amp;rsquo;ll need to build a container image from the &lt;a href=&#34;https://kairos.io/docs/reference/image_matrix/&#34;&gt;Kairos images&lt;/a&gt;. Here&amp;rsquo;s an example with Docker which adds &lt;code&gt;figlet&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; quay.io/kairos/@flavor:@flavorRelease-standard-amd64-generic-master-k3sv1.33.4-k3s1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; zypper in -y figlet&lt;span class=&#34;err&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my-version&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; envsubst &lt;span class=&#34;s1&#34;&gt;&amp;#39;${VERSION}&amp;#39;&lt;/span&gt; &amp;lt;/etc/os-release&lt;span class=&#34;err&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After creating your Dockerfile, you can build your own image by running the following command:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build Kairos appliances</title>
      <link>https://kairos.io/docs/advanced/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/build/</guid>
      <description>&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;&#xA;&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;&#xA;&#xA;    This page is a work in progress!&#xA;The feature is experimental and API is likely going to be subject to changes, don&amp;rsquo;t rely on it yet!&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;&#xA;&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;&#xA;&#xA;    This guide provides detailed information about building Kairos images. For a complete guide on creating custom cloud images, including when and how to use these build methods, see &lt;a href=&#34;https://kairos.io/docs/advanced/creating_custom_cloud_images/&#34;&gt;Creating Custom Cloud Images&lt;/a&gt;.&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;This documentation section describes how the Kairos Kubernetes Native API extensions can be used to build custom appliances or booting medium for Kairos.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Extending the system with systemd extensions</title>
      <link>https://kairos.io/docs/advanced/sys-extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/sys-extensions/</guid>
      <description>&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;&#xA;&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;&#xA;&#xA;    This feature is in preview state and only available in Kairos v3.4.x releases and alphas.&#xA;Please check the section &amp;ldquo;Known issues&amp;rdquo; at the bottom for more information.&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;&#xA;&lt;h4 class=&#34;alert-heading&#34;&gt;Signing keys for system extensions under Trusted Boot&lt;/h4&gt;&#xA;&#xA;    Sysexts need to be signed with the same key/cert as the ones used to sign the EFI files. As those are part of the system and available in the EFI firmware, we can extract the public part and verify the sysexts locally. Any of the PK, KEK or DB keys can be used to sign sysexts. This only affects Trusted Boot.&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;System extensions are a way to extend the system with additional files and directories that are mounted at boot time. System extension images may – dynamically at runtime — extend the /usr/ directory hierarchies with additional files. This is particularly useful on immutable system images where a /usr/ hierarchy residing on a read-only file system shall be extended temporarily at runtime without making any persistent modifications.&#xA;Or on a Trusted Boot system where the system is booted from a read-only EFI and cannot be extended easily without breaking the signature.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Networking</title>
      <link>https://kairos.io/docs/advanced/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/networking/</guid>
      <description>&lt;p&gt;By default, Kairos ISOs are configured to automatically get an IP from the network interface. However, depending on the base system you have chosen, there are different way to configure networking. This section collects information on setting network configuration depending on the base that is being chosen (openSUSE, Alpine, Ubuntu).&lt;/p&gt;&#xA;&lt;p&gt;There are different network managers depending on the distro:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;connman&lt;/code&gt; is available on Alpine-based distribution. By default is enabled on Kairos Alpine flavored variants.&lt;/li&gt;&#xA;&lt;li&gt;systemd-based flavors are all using &lt;code&gt;systemd-networkd&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;static-ip&#34;&gt;Static IP&lt;/h2&gt;&#xA;&lt;p&gt;To get a static IP, you can additionally define the following in your configuration file, depending on the network-manager being used:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using /opt with System Extensions</title>
      <link>https://kairos.io/docs/advanced/adding_opt_to_system_extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/adding_opt_to_system_extensions/</guid>
      <description>&lt;h2 id=&#34;using-opt-with-system-extensions&#34;&gt;Using /opt with System Extensions&lt;/h2&gt;&#xA;&lt;p&gt;By default, Kairos does not include &lt;code&gt;/opt&lt;/code&gt; as a system extension (&lt;code&gt;sysext&lt;/code&gt;) overlay hierarchy. This is because in normal runtime, &lt;code&gt;/opt&lt;/code&gt; is writable and bind-mounted to the persistent partition, allowing users and applications to freely write data that persists across reboots.&lt;/p&gt;&#xA;&lt;p&gt;However, when a system extension is loaded that includes a &lt;code&gt;/opt&lt;/code&gt; hierarchy, the behavior of that directory changes: it becomes &lt;strong&gt;read-only&lt;/strong&gt;, overridden by the overlay from the system extension image. This is a consequence of how &lt;code&gt;systemd-sysext&lt;/code&gt; currently operates and reflects a known upstream limitation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bundles</title>
      <link>https://kairos.io/docs/advanced/bundles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/bundles/</guid>
      <description>&lt;p&gt;Whether you need to add custom logic, install extra packages, or make other modifications to your system, bundles simplify the process. They can be applied after installation or before bootstrapping a node.&lt;/p&gt;&#xA;&lt;p&gt;Bundles are container images containing only files (and not full OS) that can be used to install new software or extend the cloud-init syntax. You can find community-supported bundles in the &lt;a href=&#34;https://github.com/kairos-io/community-bundles&#34;&gt;community-bundles&lt;/a&gt; repository.&lt;/p&gt;&#xA;&lt;h2 id=&#34;consuming-bundles&#34;&gt;Consuming Bundles&lt;/h2&gt;&#xA;&lt;p&gt;To use a bundle in your Kairos configuration, you will need to specify the type of bundle and the target image in your cloud-config file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encrypting User Data with Kairos</title>
      <link>https://kairos.io/docs/advanced/partition_encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/partition_encryption/</guid>
      <description>&lt;p&gt;Kairos offers the ability to encrypt user data partitions with &lt;code&gt;LUKS&lt;/code&gt;. User-data partitions are dedicated to persist data for a running system, stored separately from the OS images. This encryption mechanism can also be used to encrypt additional partitions created during the installation process.&lt;/p&gt;&#xA;&lt;p&gt;Kairos supports the following encryption scenarios:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Offline mode&lt;/strong&gt; - Encryption key for partitions is stored on the machine inside the TPM chip.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Online mode (Automated)&lt;/strong&gt; - Keypair used to encrypt the partition passphrase is stored on the TPM chip, and an external server is used to store the encrypted passphrases.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Online mode (Manually configured)&lt;/strong&gt; - Plaintext passphrase is stored in the KMS server and returned to the node after TPM challenging.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2420543/214405291-97a30f2d-d70a-45ba-b842-5282c722c79e.png&#34; alt=&#34;encryption1_1674470732563_0&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Confidential computing setup</title>
      <link>https://kairos.io/docs/advanced/coco/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/coco/</guid>
      <description>&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;&#xA;&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;&#xA;&#xA;    This page describes features that are still experimental in Kairos. There are a lot of things that can be improved and might be more streamlined in the future.&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Confidential computing is a type of secure computing that allows users to encrypt and decrypt data on a secure, isolated computing environment.&#xA;It works by encrypting the data before it is sent to the cloud or other computing resources. This allows users to keep their data private and secure, even if it is accessed by unauthorized parties.&#xA;This makes it useful for sensitive data such as financial information, health records, and other confidential data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Revoking secure boot access</title>
      <link>https://kairos.io/docs/advanced/revoking-secureboot-access/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/advanced/revoking-secureboot-access/</guid>
      <description>&lt;p&gt;This document describes how an administrator can prevent certain OS images from&#xA;booting on their hardware in the context of &lt;a href=&#34;https://kairos.io/docs/architecture/trustedboot/&#34;&gt;&amp;ldquo;Trusted Boot&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Two different scenarios will be covered, with the process being only slightly different for each case.&lt;/p&gt;&#xA;&lt;h2 id=&#34;scenario-1---signing-certificate-is-no-longer-trusted&#34;&gt;Scenario 1 - Signing certificate is no longer trusted&lt;/h2&gt;&#xA;&lt;p&gt;The process of creating signed images that can be trusted to boot, requires the&#xA;signing keys to be safe and only accessible to the vendor that produces the OS images.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
