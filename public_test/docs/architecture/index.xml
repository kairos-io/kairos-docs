<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Kairos</title>
    <link>https://kairos.io/docs/architecture/</link>
    <description>Recent content in Architecture on Kairos</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://kairos.io/docs/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Immutable</title>
      <link>https://kairos.io/docs/architecture/immutable/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/architecture/immutable/</guid>
      <description>&lt;p&gt;Kairos adopts an immutable layout and derivatives created with its toolkit, inherit the same immutability attributes.&lt;/p&gt;&#xA;&lt;p&gt;An immutable OS is a carefully engineered system which boots in a restricted, permissionless mode, where certain paths of the system are not writable. For instance, after installation it&amp;rsquo;s not possible to add additional packages to the system, and any configuration change is discarded after reboot.&lt;/p&gt;&#xA;&lt;p&gt;A running Linux-based OS system will have the following paths:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Container based</title>
      <link>https://kairos.io/docs/architecture/container/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/architecture/container/</guid>
      <description>&lt;p&gt;Kairos is a container-based operating system (OS).&lt;/p&gt;&#xA;&lt;p&gt;A container-based operating system is an OS that is shipped via containers. Indeed, if it happens to be based on Linux (most probably), you can run the container image as well on your Docker daemon. The image being booted is the container, which contains all the required pieces in order to boot (Kernel, Initrd, Init system). There is no real container runtime running the image. The container is used to construct an image internally that is then used to boot the system in an A/B fashion, so there is no overhead introduced. The system being booted is actually a snapshot of the container.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SecureBoot support</title>
      <link>https://kairos.io/docs/architecture/secureboot/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/architecture/secureboot/</guid>
      <description>&lt;h2 id=&#34;secureboot-support-implementation&#34;&gt;SecureBoot support implementation&lt;/h2&gt;&#xA;&lt;p&gt;Currently Kairos supports SecureBoot based on the upstream artifacts.&#xA;We piggyback on the upstream artifacts to be properly signed in order to support SecureBoot.&lt;/p&gt;&#xA;&lt;p&gt;Before this was supported, we shipped a single set of artifacts that were signed by one of the upstream distros.&#xA;That meant that only that distro was supported under SecureBoot as we needed all artifacts in the chain to be signed with the same key. So that meant that secureboot was only supported on the same distro that we obtained the artifacts from.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud init based</title>
      <link>https://kairos.io/docs/architecture/cloud-init/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/architecture/cloud-init/</guid>
      <description>&lt;p&gt;Kairos supports the &lt;a href=&#34;https://github.com/mudler/yip#compatibility-with-cloud-init-format&#34;&gt;standard cloud-init syntax&lt;/a&gt; and &lt;a href=&#34;https://github.com/mudler/yip&#34;&gt;its own extended syntax&lt;/a&gt; to allow to configure a system declaratively with a cloud-config centric approach.&lt;/p&gt;&#xA;&lt;p&gt;If you are not familiar with the concepts of cloud-init, &lt;a href=&#34;https://cloud-init.io/&#34;&gt;official cloud-init&lt;/a&gt; is a recommended read.&lt;/p&gt;&#xA;&lt;h2 id=&#34;configuration-persistency&#34;&gt;Configuration persistency&lt;/h2&gt;&#xA;&lt;p&gt;Kairos is an Immutable OS and the only configuration that is persistent across reboots is the cloud-init configuration.&#xA;Multiple cloud-init files can be present in the system and Kairos will read them and process them in sequence (lexicographic order) allowing to extend the configuration with additional pieces also after deployment, or to manage logical configuration pieces separately.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Meta-Distribution</title>
      <link>https://kairos.io/docs/architecture/meta/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/architecture/meta/</guid>
      <description>&lt;p&gt;We like to define Kairos as a meta-Linux Distribution, as its goal is to convert other distros to an immutable layout with Kubernetes Native components.&lt;/p&gt;&#xA;&lt;h2 id=&#34;kairos&#34;&gt;Kairos&lt;/h2&gt;&#xA;&lt;p&gt;Kairos is a software stack is composed of the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A core OS image release for each flavor in ISO, qcow2, and other similar formats (see &lt;a href=&#34;https://kairos.io/docs/reference/image_matrix/&#34;&gt;the list of supported distributions&lt;/a&gt;) provided for user convenience&lt;/li&gt;&#xA;&lt;li&gt;A release with K3s embedded (optional).&lt;/li&gt;&#xA;&lt;li&gt;An agent installed into the nodes to manage the node lifecycle.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Every component is extensible and modular such as it can be customized and replaced in the stack and built off either locally or with Kubernetes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>P2P Network</title>
      <link>https://kairos.io/docs/architecture/network/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/architecture/network/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;As more organizations seek to take advantage of the benefits of Kubernetes for their edge applications, the difficulties of managing large-scale clusters become apparent. Managing, configuring, and coordinating multiple clusters can be a complex and time-consuming process. We need solutions that offer zero-touch configuration and self-coordination.&lt;/p&gt;&#xA;&lt;p&gt;To address these challenges, Kairos provides an easy and robust solution for deploying Kubernetes workloads at the edge. By utilizing peer-to-peer (p2p) technology, Kairos can automatically coordinate and create Kubernetes clusters without requiring a control management interface. This frees users up to concentrate on running and scaling their applications instead of spending time on cluster management.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Trusted Boot Architecture</title>
      <link>https://kairos.io/docs/architecture/trustedboot/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://kairos.io/docs/architecture/trustedboot/</guid>
      <description>&lt;p&gt;Trusted boot is a combination of technologies that allows us to enhance the security posture of a running system. It is composed by FDE, Secure Boot and Measured Boot.&#xA;Trusted boot is an architectural requirement of &lt;a href=&#34;https://www.spectrocloud.com/product/sena&#34;&gt;SENA (Secure Edge Native Architecture)&lt;/a&gt; and is a key component of Kairos.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;You can read more about Trusted Boot in &lt;a href=&#34;https://0pointer.de/blog/brave-new-trusted-boot-world.html&#34;&gt;https://0pointer.de/blog/brave-new-trusted-boot-world.html&lt;/a&gt; and about SENA here: &lt;a href=&#34;https://kairos.io/blog/2023/04/18/kairos-is-now-part-of-the-secure-edge-native-architecture-by-spectro-cloud-and-intel/&#34;&gt;https://kairos.io/blog/2023/04/18/kairos-is-now-part-of-the-secure-edge-native-architecture-by-spectro-cloud-and-intel/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;By combining Secure Boot, Measured Boot and FDE we can guarantee that a system was not tampered with, and the user-data is protected by cold attacks, we refer to this combination of technologies stacked together with &amp;ldquo;Trusted Boot&amp;rdquo; or &amp;ldquo;Trusted Boot Experience&amp;rdquo;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
